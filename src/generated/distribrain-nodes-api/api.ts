/* tslint:disable */
/* eslint-disable */
/**
 * DistriBrain Nodes API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CosmosTokenDto
 */
export interface CosmosTokenDto {
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenDto
     */
    'denom': string;
    /**
     * 
     * @type {number}
     * @memberof CosmosTokenDto
     */
    'exponent': number;
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenDto
     */
    'chainId': string;
    /**
     * 
     * @type {string}
     * @memberof CosmosTokenDto
     */
    'chainPrefix': string;
}
/**
 * 
 * @export
 * @interface CreatePurchaseTransactionRequestDto
 */
export interface CreatePurchaseTransactionRequestDto {
    /**
     * 
     * @type {number}
     * @memberof CreatePurchaseTransactionRequestDto
     */
    'nodeTypeId': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseTransactionRequestDto
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof CreatePurchaseTransactionRequestDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseTransactionRequestDto
     */
    'referralCode': string;
}
/**
 * 
 * @export
 * @interface CreatePurchaseTransactionResponseDto
 */
export interface CreatePurchaseTransactionResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePurchaseTransactionResponseDto
     */
    'unsignedTransactionHex': string;
}
/**
 * 
 * @export
 * @interface Erc20TokenDto
 */
export interface Erc20TokenDto {
    /**
     * 
     * @type {string}
     * @memberof Erc20TokenDto
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof Erc20TokenDto
     */
    'decimals': number;
    /**
     * 
     * @type {number}
     * @memberof Erc20TokenDto
     */
    'chainId'?: number;
}
/**
 * 
 * @export
 * @interface HealthControllerReadiness200Response
 */
export interface HealthControllerReadiness200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerReadiness200Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerReadiness200ResponseInfoValue; }}
     * @memberof HealthControllerReadiness200Response
     */
    'info'?: { [key: string]: HealthControllerReadiness200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerReadiness200ResponseInfoValue; }}
     * @memberof HealthControllerReadiness200Response
     */
    'error'?: { [key: string]: HealthControllerReadiness200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerReadiness200ResponseInfoValue; }}
     * @memberof HealthControllerReadiness200Response
     */
    'details'?: { [key: string]: HealthControllerReadiness200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface HealthControllerReadiness200ResponseInfoValue
 */
export interface HealthControllerReadiness200ResponseInfoValue {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof HealthControllerReadiness200ResponseInfoValue
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface HealthControllerReadiness503Response
 */
export interface HealthControllerReadiness503Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerReadiness503Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerReadiness200ResponseInfoValue; }}
     * @memberof HealthControllerReadiness503Response
     */
    'info'?: { [key: string]: HealthControllerReadiness200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerReadiness200ResponseInfoValue; }}
     * @memberof HealthControllerReadiness503Response
     */
    'error'?: { [key: string]: HealthControllerReadiness200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerReadiness200ResponseInfoValue; }}
     * @memberof HealthControllerReadiness503Response
     */
    'details'?: { [key: string]: HealthControllerReadiness200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface HoldingRewardsWithdrawRequestDto
 */
export interface HoldingRewardsWithdrawRequestDto {
    /**
     * 
     * @type {string}
     * @memberof HoldingRewardsWithdrawRequestDto
     */
    'address': string;
    /**
     * 
     * @type {boolean}
     * @memberof HoldingRewardsWithdrawRequestDto
     */
    'includeVested': boolean;
}
/**
 * 
 * @export
 * @interface MaintenanceModeInfoDto
 */
export interface MaintenanceModeInfoDto {
    /**
     * 
     * @type {boolean}
     * @memberof MaintenanceModeInfoDto
     */
    'maintenanceModeActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceModeInfoDto
     */
    'message': string | null;
}
/**
 * 
 * @export
 * @interface NodesFeatureFlags
 */
export interface NodesFeatureFlags {
    /**
     * 
     * @type {boolean}
     * @memberof NodesFeatureFlags
     */
    'purchasingDisabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodesFeatureFlags
     */
    'purchasingReferralCodeRequired': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodesFeatureFlags
     */
    'holdingRewardsDispenseDisabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodesFeatureFlags
     */
    'holdingRewardsWithdrawDisabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodesFeatureFlags
     */
    'referralRewardsWithdrawDisabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NodesFeatureFlags
     */
    'dePinKeyPurchaseRewardsWithdrawDisabled': boolean;
}
/**
 * 
 * @export
 * @interface NodesInformationDto
 */
export interface NodesInformationDto {
    /**
     * 
     * @type {NodesFeatureFlags}
     * @memberof NodesInformationDto
     */
    'featureFlags': NodesFeatureFlags;
    /**
     * 
     * @type {NodesPurchaseInfoDto}
     * @memberof NodesInformationDto
     */
    'purchaseInfo': NodesPurchaseInfoDto;
    /**
     * 
     * @type {Array<NodesTypePurchaseInfoDto>}
     * @memberof NodesInformationDto
     */
    'nodeTypes': Array<NodesTypePurchaseInfoDto>;
    /**
     * 
     * @type {Erc20TokenDto}
     * @memberof NodesInformationDto
     */
    'referralRewardErc20Token': Erc20TokenDto;
    /**
     * 
     * @type {Erc20TokenDto}
     * @memberof NodesInformationDto
     */
    'holdingRewardErc20Token': Erc20TokenDto;
    /**
     * 
     * @type {CosmosTokenDto}
     * @memberof NodesInformationDto
     */
    'dePinKeyPurchaseRewardErc20Token': CosmosTokenDto;
    /**
     * 
     * @type {number}
     * @memberof NodesInformationDto
     */
    'holdingRewardVestingPeriodDays': number;
    /**
     * 
     * @type {number}
     * @memberof NodesInformationDto
     */
    'holdingRewardEarlyWithdrawalPenaltyBps': number;
    /**
     * 
     * @type {string}
     * @memberof NodesInformationDto
     */
    'holdingRewardMinAmountOnWalletRequiredForWithdrawal': string;
}
/**
 * 
 * @export
 * @interface NodesPurchaseInfoDto
 */
export interface NodesPurchaseInfoDto {
    /**
     * 
     * @type {Erc20TokenDto}
     * @memberof NodesPurchaseInfoDto
     */
    'erc20Token': Erc20TokenDto;
    /**
     * 
     * @type {number}
     * @memberof NodesPurchaseInfoDto
     */
    'globalPurchasedAllNodesCount': number;
    /**
     * 
     * @type {number}
     * @memberof NodesPurchaseInfoDto
     */
    'globalPurchasedDePinKeysCount': number;
}
/**
 * 
 * @export
 * @interface NodesReferralPurchaseDto
 */
export interface NodesReferralPurchaseDto {
    /**
     * 
     * @type {string}
     * @memberof NodesReferralPurchaseDto
     */
    'transactionHash': string;
    /**
     * 
     * @type {number}
     * @memberof NodesReferralPurchaseDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof NodesReferralPurchaseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof NodesReferralPurchaseDto
     */
    'buyerAddress': string;
    /**
     * 
     * @type {string}
     * @memberof NodesReferralPurchaseDto
     */
    'rewardEarnedTokenAmount': string;
}
/**
 * 
 * @export
 * @interface NodesTypePurchaseInfoDto
 */
export interface NodesTypePurchaseInfoDto {
    /**
     * 
     * @type {number}
     * @memberof NodesTypePurchaseInfoDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof NodesTypePurchaseInfoDto
     */
    'currentPricePerNode': string;
    /**
     * 
     * @type {number}
     * @memberof NodesTypePurchaseInfoDto
     */
    'limitAtPrice': number;
    /**
     * 
     * @type {number}
     * @memberof NodesTypePurchaseInfoDto
     */
    'globalPurchasedCount': number;
}
/**
 * 
 * @export
 * @interface RewardsWithdrawRequestDto
 */
export interface RewardsWithdrawRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RewardsWithdrawRequestDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface UserMyReferralCodeResponseDto
 */
export interface UserMyReferralCodeResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserMyReferralCodeResponseDto
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof UserMyReferralCodeResponseDto
     */
    'referralRewardBps': number;
}
/**
 * 
 * @export
 * @interface UserNodesAccountPurchaseNodeSummaryDto
 */
export interface UserNodesAccountPurchaseNodeSummaryDto {
    /**
     * 
     * @type {number}
     * @memberof UserNodesAccountPurchaseNodeSummaryDto
     */
    'nodeTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof UserNodesAccountPurchaseNodeSummaryDto
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface UserNodesAccountSummaryDto
 */
export interface UserNodesAccountSummaryDto {
    /**
     * 
     * @type {Array<UserNodesAccountPurchaseNodeSummaryDto>}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalPurchasedNodesCount': Array<UserNodesAccountPurchaseNodeSummaryDto>;
    /**
     * 
     * @type {number}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalDePinKeyCount': number;
    /**
     * 
     * @type {string}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalReferralRewardAvailableTokenAmount': string;
    /**
     * 
     * @type {string}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalHoldingRewardBalanceTokenAmount': string;
    /**
     * 
     * @type {string}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalHoldingRewardAvailableTokenAmount': string;
    /**
     * 
     * @type {string}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalHoldingRewardVestedTokenAmount': string;
    /**
     * 
     * @type {string}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalHoldingRewardConvertableVestedTokenAmount': string;
    /**
     * 
     * @type {string}
     * @memberof UserNodesAccountSummaryDto
     */
    'totalDePinKeyPurchaseRewardAvailableTokenAmount': string;
}
/**
 * 
 * @export
 * @interface UserNodesReferralPurchasesDto
 */
export interface UserNodesReferralPurchasesDto {
    /**
     * 
     * @type {Array<NodesReferralPurchaseDto>}
     * @memberof UserNodesReferralPurchasesDto
     */
    'purchases': Array<NodesReferralPurchaseDto>;
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerReadiness: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerReadiness(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerReadiness200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerReadiness(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerReadiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerReadiness(options?: any): AxiosPromise<HealthControllerReadiness200Response> {
            return localVarFp.healthControllerReadiness(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthControllerReadiness(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerReadiness(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NodesApi - axios parameter creator
 * @export
 */
export const NodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetInformation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetMaintenanceInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes/maintenance-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetReferralPurchases: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes/me/referral-rewards/purchases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetUserSummary: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes/me/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostConfirmPurchaseTransaction: async (transactionHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionHash' is not null or undefined
            assertParamExists('nodesControllerPostConfirmPurchaseTransaction', 'transactionHash', transactionHash)
            const localVarPath = `/v1/nodes/confirm-purchase-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (transactionHash !== undefined) {
                localVarQueryParameter['transactionHash'] = transactionHash;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostConvertHoldingRewardsWithFinishedVesting: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/nodes/convert-holding-rewards-with-finished-vesting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePurchaseTransactionRequestDto} createPurchaseTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostCreatePurchaseTransaction: async (createPurchaseTransactionRequestDto: CreatePurchaseTransactionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPurchaseTransactionRequestDto' is not null or undefined
            assertParamExists('nodesControllerPostCreatePurchaseTransaction', 'createPurchaseTransactionRequestDto', createPurchaseTransactionRequestDto)
            const localVarPath = `/v1/nodes/create-purchase-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPurchaseTransactionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostDePinKeyPurchaseRewardsWithdraw: async (rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rewardsWithdrawRequestDto' is not null or undefined
            assertParamExists('nodesControllerPostDePinKeyPurchaseRewardsWithdraw', 'rewardsWithdrawRequestDto', rewardsWithdrawRequestDto)
            const localVarPath = `/v1/nodes/me/depin-key-purchase-rewards/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rewardsWithdrawRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HoldingRewardsWithdrawRequestDto} holdingRewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostHoldingRewardsWithdraw: async (holdingRewardsWithdrawRequestDto: HoldingRewardsWithdrawRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'holdingRewardsWithdrawRequestDto' is not null or undefined
            assertParamExists('nodesControllerPostHoldingRewardsWithdraw', 'holdingRewardsWithdrawRequestDto', holdingRewardsWithdrawRequestDto)
            const localVarPath = `/v1/nodes/me/holding-rewards/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(holdingRewardsWithdrawRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostReferralRewardsWithdraw: async (rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rewardsWithdrawRequestDto' is not null or undefined
            assertParamExists('nodesControllerPostReferralRewardsWithdraw', 'rewardsWithdrawRequestDto', rewardsWithdrawRequestDto)
            const localVarPath = `/v1/nodes/me/referral-rewards/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rewardsWithdrawRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodesApi - functional programming interface
 * @export
 */
export const NodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerGetInformation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodesInformationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerGetInformation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerGetInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerGetMaintenanceInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MaintenanceModeInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerGetMaintenanceInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerGetMaintenanceInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerGetReferralPurchases(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNodesReferralPurchasesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerGetReferralPurchases(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerGetReferralPurchases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerGetUserSummary(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNodesAccountSummaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerGetUserSummary(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerGetUserSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} transactionHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerPostConfirmPurchaseTransaction(transactionHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerPostConfirmPurchaseTransaction(transactionHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerPostConfirmPurchaseTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerPostConvertHoldingRewardsWithFinishedVesting(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerPostConvertHoldingRewardsWithFinishedVesting(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerPostConvertHoldingRewardsWithFinishedVesting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePurchaseTransactionRequestDto} createPurchaseTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerPostCreatePurchaseTransaction(createPurchaseTransactionRequestDto: CreatePurchaseTransactionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePurchaseTransactionResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerPostCreatePurchaseTransaction(createPurchaseTransactionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerPostCreatePurchaseTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerPostDePinKeyPurchaseRewardsWithdraw(rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerPostDePinKeyPurchaseRewardsWithdraw(rewardsWithdrawRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerPostDePinKeyPurchaseRewardsWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {HoldingRewardsWithdrawRequestDto} holdingRewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerPostHoldingRewardsWithdraw(holdingRewardsWithdrawRequestDto: HoldingRewardsWithdrawRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerPostHoldingRewardsWithdraw(holdingRewardsWithdrawRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerPostHoldingRewardsWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nodesControllerPostReferralRewardsWithdraw(rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nodesControllerPostReferralRewardsWithdraw(rewardsWithdrawRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodesApi.nodesControllerPostReferralRewardsWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodesApi - factory interface
 * @export
 */
export const NodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetInformation(options?: any): AxiosPromise<NodesInformationDto> {
            return localVarFp.nodesControllerGetInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetMaintenanceInfo(options?: any): AxiosPromise<MaintenanceModeInfoDto> {
            return localVarFp.nodesControllerGetMaintenanceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetReferralPurchases(options?: any): AxiosPromise<UserNodesReferralPurchasesDto> {
            return localVarFp.nodesControllerGetReferralPurchases(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerGetUserSummary(options?: any): AxiosPromise<UserNodesAccountSummaryDto> {
            return localVarFp.nodesControllerGetUserSummary(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} transactionHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostConfirmPurchaseTransaction(transactionHash: string, options?: any): AxiosPromise<void> {
            return localVarFp.nodesControllerPostConfirmPurchaseTransaction(transactionHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostConvertHoldingRewardsWithFinishedVesting(options?: any): AxiosPromise<void> {
            return localVarFp.nodesControllerPostConvertHoldingRewardsWithFinishedVesting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePurchaseTransactionRequestDto} createPurchaseTransactionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostCreatePurchaseTransaction(createPurchaseTransactionRequestDto: CreatePurchaseTransactionRequestDto, options?: any): AxiosPromise<CreatePurchaseTransactionResponseDto> {
            return localVarFp.nodesControllerPostCreatePurchaseTransaction(createPurchaseTransactionRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostDePinKeyPurchaseRewardsWithdraw(rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.nodesControllerPostDePinKeyPurchaseRewardsWithdraw(rewardsWithdrawRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HoldingRewardsWithdrawRequestDto} holdingRewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostHoldingRewardsWithdraw(holdingRewardsWithdrawRequestDto: HoldingRewardsWithdrawRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.nodesControllerPostHoldingRewardsWithdraw(holdingRewardsWithdrawRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodesControllerPostReferralRewardsWithdraw(rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.nodesControllerPostReferralRewardsWithdraw(rewardsWithdrawRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodesApi - object-oriented interface
 * @export
 * @class NodesApi
 * @extends {BaseAPI}
 */
export class NodesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerGetInformation(options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerGetInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerGetMaintenanceInfo(options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerGetMaintenanceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerGetReferralPurchases(options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerGetReferralPurchases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerGetUserSummary(options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerGetUserSummary(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} transactionHash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerPostConfirmPurchaseTransaction(transactionHash: string, options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerPostConfirmPurchaseTransaction(transactionHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerPostConvertHoldingRewardsWithFinishedVesting(options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerPostConvertHoldingRewardsWithFinishedVesting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePurchaseTransactionRequestDto} createPurchaseTransactionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerPostCreatePurchaseTransaction(createPurchaseTransactionRequestDto: CreatePurchaseTransactionRequestDto, options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerPostCreatePurchaseTransaction(createPurchaseTransactionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerPostDePinKeyPurchaseRewardsWithdraw(rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerPostDePinKeyPurchaseRewardsWithdraw(rewardsWithdrawRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HoldingRewardsWithdrawRequestDto} holdingRewardsWithdrawRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerPostHoldingRewardsWithdraw(holdingRewardsWithdrawRequestDto: HoldingRewardsWithdrawRequestDto, options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerPostHoldingRewardsWithdraw(holdingRewardsWithdrawRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RewardsWithdrawRequestDto} rewardsWithdrawRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesApi
     */
    public nodesControllerPostReferralRewardsWithdraw(rewardsWithdrawRequestDto: RewardsWithdrawRequestDto, options?: RawAxiosRequestConfig) {
        return NodesApiFp(this.configuration).nodesControllerPostReferralRewardsWithdraw(rewardsWithdrawRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetMyReferralCode: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users/me/referral-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetMyReferralCode(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMyReferralCodeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetMyReferralCode(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetMyReferralCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetMyReferralCode(options?: any): AxiosPromise<UserMyReferralCodeResponseDto> {
            return localVarFp.usersControllerGetMyReferralCode(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetMyReferralCode(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetMyReferralCode(options).then((request) => request(this.axios, this.basePath));
    }
}



